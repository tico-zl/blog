<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Git~将本地项目推送到远程仓库</title>
      <link href="/2019/11/25/git/Git-%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
      <url>/2019/11/25/git/Git-%E5%B0%86%E6%9C%AC%E5%9C%B0%E9%A1%B9%E7%9B%AE%E6%8E%A8%E9%80%81%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h1 id="Git-将本地项目推送到远程仓库"><a href="#Git-将本地项目推送到远程仓库" class="headerlink" title="Git~将本地项目推送到远程仓库"></a>Git~将本地项目推送到远程仓库</h1><p>0、前言</p><p>如果应经有远程仓库和本地仓库，那么本地仓库和远程仓库实际上是独立的两个仓库，这个时候就需要将两个仓库的历史进行合并后再push。</p><h2 id="1、进入本地项目目录，将当前目录初始化git"><a href="#1、进入本地项目目录，将当前目录初始化git" class="headerlink" title="1、进入本地项目目录，将当前目录初始化git"></a>1、进入本地项目目录，将当前目录初始化git</h2><pre><code class="shell">git init</code></pre><h2 id="2、添加远程仓库地址"><a href="#2、添加远程仓库地址" class="headerlink" title="2、添加远程仓库地址"></a>2、添加远程仓库地址</h2><pre><code class="shell">git remote add origin https://gitee.com/tico-zl/arithmetic-leetcode.gitgit add . git commit -m &quot;first commit&quot;</code></pre><h2 id="3、合并两个独立启动仓库的历史-避免fatal-refusing-to-merge-unrelated-histories错误"><a href="#3、合并两个独立启动仓库的历史-避免fatal-refusing-to-merge-unrelated-histories错误" class="headerlink" title="3、合并两个独立启动仓库的历史, 避免fatal: refusing to merge unrelated histories错误"></a>3、合并两个独立启动仓库的历史, 避免<code>fatal: refusing to merge unrelated histories</code>错误</h2><pre><code class="shell">git pull origin master --allow-unrelated-histories</code></pre><h2 id="4、最后push"><a href="#4、最后push" class="headerlink" title="4、最后push"></a>4、最后push</h2><pre><code class="shell"># git push --set-upstream &lt;远程主机名&gt; &lt;本地分支名&gt;:&lt;远程分支名&gt;git push --set-upstream origin master:master</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git~根据远程仓库a的tag,创建分支master,然后推到远程仓库b</title>
      <link href="/2019/11/25/git/Git-%E6%A0%B9%E6%8D%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93a%E7%9A%84tag-%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AFmaster-%E7%84%B6%E5%90%8E%E6%8E%A8%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93b/"/>
      <url>/2019/11/25/git/Git-%E6%A0%B9%E6%8D%AE%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93a%E7%9A%84tag-%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AFmaster-%E7%84%B6%E5%90%8E%E6%8E%A8%E5%88%B0%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93b/</url>
      
        <content type="html"><![CDATA[<p>1、将仓库a的克隆下来</p><pre><code class="shell">git clone https://gitlab.tico.com/test/a.git</code></pre><p>2、更新获取tag</p><pre><code class="shell"># 切换到a项目目录cd a# 更新远程taggit fetch origin tag v1.0</code></pre><p>3、将tag 1.0v 创建为branch分支</p><pre><code class="shell">git branch master v1.0# 切换创建好的分支git ck master</code></pre><p>4、最后将a远程地址改为b的地址</p><pre><code class="shell"># 修改远程地址git remote set-url origin https://newgitlab.tico.com/test/b.git# 将代码推到远程仓库b上git push --set-upstream origin master</code></pre><p> 5、小结<br>通过:<code>git branch &lt;new-branch-name&gt; &lt;tag-name&gt;</code> 会根据tag创建新的分支.<br>例如:<code>git branch newbranch v1.0</code> . 会以tag <code>v1.0</code>创建新的分支<code>newbranch</code>;</p>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git~回退到某个历史版本</title>
      <link href="/2019/11/25/git/Git-%E5%9B%9E%E9%80%80%E5%88%B0%E6%9F%90%E4%B8%AA%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC/"/>
      <url>/2019/11/25/git/Git-%E5%9B%9E%E9%80%80%E5%88%B0%E6%9F%90%E4%B8%AA%E5%8E%86%E5%8F%B2%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<p><code>只需要两个步骤：</code></p><p>一、回退到某个版本命令</p><pre><code class="shell">git reset --hard 139dcfaa558e3276b30b6b2e5cbbb9c00bbdca96</code></pre><p>二、强制提交到branch-name分支(origin为远程服务器)</p><pre><code class="shell">git push -f -u origin branch-name</code></pre>]]></content>
      
      
      <categories>
          
          <category> git </category>
          
      </categories>
      
      
        <tags>
            
            <tag> git </tag>
            
            <tag> 版本控制 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
